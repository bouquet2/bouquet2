name: Update Talos Version

permissions:
  contents: read
  id-token: write
  secrets: read

on:
  push:
    paths:
      - 'vars.yaml'
    branches:
      - main
  workflow_dispatch:

jobs:
  update-talos:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Install talosctl
        run: |
          curl -Lo /usr/local/bin/talosctl https://github.com/siderolabs/talos/releases/latest/download/talosctl-linux-amd64
          chmod +x /usr/local/bin/talosctl

      - name: Connect Tailscale
        uses: tailscale/github-action@v3
        with:
          oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
          oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}
          tags: tag:k8s-deploy
          hostname: kreat8s-talos-update
          use-cache: true

      - name: Add talosconfig
        env:
          TALOSCONFIG: ${{ secrets.TALOSCONFIG }}
        run: |
          mkdir -p ~/.talos
          echo "$TALOSCONFIG" > ~/.talos/config
          chmod 600 ~/.talos/config

      - name: Add kubeconfig
        env:
          KUBECONFIG_DATA: ${{ secrets.KUBECONFIG }}
        run: |
          mkdir -p ~/.kube
          echo "$KUBECONFIG_DATA" > ~/.kube/config
          chmod 600 ~/.kube/config

      - name: Get current Talos version from nodes
        id: current-nodes-version
        run: |
          sleep 10
          MAX_ATTEMPTS=3
          ATTEMPT=1
          while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
            echo "Attempt $ATTEMPT of $MAX_ATTEMPTS to get Talos versions..."
            VERSIONS=$(talosctl version | sed '1,/Server/d' | grep "Tag:" | sort -t: -u -k1,1 | awk '{printf $2}')
            UNIQUE_VERSIONS=$(echo "$VERSIONS" | sort -u | wc -l)
            
            if [ "$UNIQUE_VERSIONS" -gt 1 ]; then
              echo "::error::Version mismatch between nodes, can't proceed safely"
              exit 1
            fi

            if [ -n "$VERSIONS" ]; then
              echo "Successfully got Talos versions"
              echo "current_nodes_version=$VERSIONS" >> $GITHUB_OUTPUT
              break
            fi

            if [ $ATTEMPT -eq $MAX_ATTEMPTS ]; then
              echo "::error::No Talos version found after $MAX_ATTEMPTS attempts"
              exit 1
            fi

            echo "No version found, retrying in 30 seconds..."
            sleep 30
            ATTEMPT=$((ATTEMPT + 1))
          done

      - name: Get target Talos version from vars.yaml
        id: target-version
        run: |
          TARGET_VERSION=$(grep talosVersion vars.yaml | cut -d' ' -f2)
          echo "target_version=$TARGET_VERSION" >> $GITHUB_OUTPUT

      - name: Get image ID from vars.yaml
        id: image-id
        run: |
          IMAGE_ID=$(grep imageId vars.yaml | cut -d' ' -f2)
          echo "image_id=$IMAGE_ID" >> $GITHUB_OUTPUT

      - name: Parse control planes from nodes.tfvars
        id: control-planes
        run: |
          # Extract control plane names using awk and join with comma
          CP_NAMES=$(awk '/control_planes = {/,/^}/ {if ($1 ~ /name/) print $3}' tofu/nodes.tfvars | tr -d '",' | paste -sd,)
          echo "control_planes=$CP_NAMES" >> $GITHUB_OUTPUT

      - name: Parse worker nodes from nodes.tfvars
        id: worker-nodes
        run: |
          # Extract worker node names using awk and join with comma
          WORKER_NODES=$(awk '/workers = {/,/^}/ {if ($1 ~ /name/) print $3}' tofu/nodes.tfvars | tr -d '",' | paste -sd,)
          echo "worker_nodes=$WORKER_NODES" >> $GITHUB_OUTPUT

      - name: Get control plane IPs
        id: control-plane-ips
        run: |
          for cp in $(echo ${{ steps.control-planes.outputs.control_planes }} | tr ',' ' '); do
            echo "Getting IP for control plane $cp..."
            IP=$(tailscale ip -4 $cp)
            if [ -z "$IP" ]; then
              echo "::error::Could not get IP for control plane $cp"
              exit 1
            fi
            echo "Found IP $IP for control plane $cp"
            echo "cp_ip_${cp}=$IP" >> $GITHUB_OUTPUT
          done

      - name: Get worker node IPs
        id: worker-node-ips
        run: |
          for worker in $(echo ${{ steps.worker-nodes.outputs.worker_nodes }} | tr ',' ' '); do
            echo "Getting IP for worker $worker..."
            IP=$(tailscale ip -4 $worker)
            if [ -z "$IP" ]; then
                echo "::error::Could not get IP for worker $worker"
                exit 1
            fi
            echo "Found IP $IP for worker $worker"
            echo "worker_ip_${worker}=$IP" >> $GITHUB_OUTPUT
          done

      - name: Update Talos version if changed (control planes)
        if: steps.current-nodes-version.outputs.current_nodes_version != steps.target-version.outputs.target_version
        run: |
          echo "Updating Talos version from ${{ steps.current-nodes-version.outputs.current_nodes_version }} to ${{ steps.target-version.outputs.target_version }} for control planes"
          for cp in $(echo ${{ steps.control-planes.outputs.control_planes }} | tr ',' ' '); do
            echo "Updating control plane: $cp"
            NODE_IP=$(echo "${{ steps.control-plane-ips.outputs }}" | grep "cp_ip_${cp}=" | cut -d'=' -f2)
            talosctl upgrade --image "factory.talos.dev/installer/${{ steps.image-id.outputs.image_id }}:${{ steps.target-version.outputs.target_version }}" --nodes "$NODE_IP"
            sleep 60

            MAX_ATTEMPTS=3
            ATTEMPT=1
            while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
              echo "Attempt $ATTEMPT of $MAX_ATTEMPTS to verify upgrade for $cp..."
              UPGRADE_VERSION=$(talosctl version --nodes "$NODE_IP" | sed '1,/Server/d' | grep "Tag:" | sort -t: -u -k1,1 | awk '{printf $2}')
              
              if [ "$UPGRADE_VERSION" = "${{ steps.target-version.outputs.target_version }}" ]; then
                echo "Successfully verified upgrade for $cp"
                break
              fi

              if [ $ATTEMPT -eq $MAX_ATTEMPTS ]; then
                echo "::error::Upgrade verification failed for $cp after $MAX_ATTEMPTS attempts"
                exit 1
              fi

              echo "Version mismatch, retrying in 30 seconds..."
              sleep 30
              ATTEMPT=$((ATTEMPT + 1))
            done
          done

      - name: Wait for control planes to be ready
        if: steps.current-nodes-version.outputs.current_nodes_version != steps.target-version.outputs.target_version
        run: |
          echo "Waiting for control planes to be ready..."
          sleep 60  # Wait 1 minute for control planes to stabilize

      - name: Update Talos version if changed (worker nodes)
        if: steps.current-nodes-version.outputs.current_nodes_version != steps.target-version.outputs.target_version
        run: |
          echo "Updating Talos version from ${{ steps.current-nodes-version.outputs.current_nodes_version }} to ${{ steps.target-version.outputs.target_version }} for worker nodes"
          for worker in $(echo ${{ steps.worker-nodes.outputs.worker_nodes }} | tr ',' ' '); do
            echo "Updating worker node: $worker"
            NODE_IP=$(echo "${{ steps.worker-node-ips.outputs }}" | grep "worker_ip_${worker}=" | cut -d'=' -f2)
            talosctl upgrade --image "factory.talos.dev/installer/${{ steps.image-id.outputs.image_id }}:${{ steps.target-version.outputs.target_version }}" --nodes "$NODE_IP"
            sleep 60

            MAX_ATTEMPTS=3
            ATTEMPT=1
            while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
              echo "Attempt $ATTEMPT of $MAX_ATTEMPTS to verify upgrade for $worker..."
              UPGRADE_VERSION=$(talosctl version --nodes "$NODE_IP" | sed '1,/Server/d' | grep "Tag:" | sort -t: -u -k1,1 | awk '{printf $2}')
              
              if [ "$UPGRADE_VERSION" = "${{ steps.target-version.outputs.target_version }}" ]; then
                echo "Successfully verified upgrade for $worker"
                break
              fi

              if [ $ATTEMPT -eq $MAX_ATTEMPTS ]; then
                echo "::error::Upgrade verification failed for $worker after $MAX_ATTEMPTS attempts"
                exit 1
              fi

              echo "Version mismatch, retrying in 30 seconds..."
              sleep 30
              ATTEMPT=$((ATTEMPT + 1))
            done
          done

  update-kubernetes:
    runs-on: ubuntu-latest
    needs: update-talos
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

      - name: Install talosctl
        run: |
          curl -Lo /usr/local/bin/talosctl https://github.com/siderolabs/talos/releases/latest/download/talosctl-linux-amd64
          chmod +x /usr/local/bin/talosctl

      - name: Connect Tailscale
        uses: tailscale/github-action@v3
        with:
          oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
          oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}
          tags: tag:k8s-deploy
          hostname: kreat8s-k8s-update
          use-cache: true

      - name: Add talosconfig
        env:
          TALOSCONFIG: ${{ secrets.TALOSCONFIG }}
        run: |
          mkdir -p ~/.talos
          echo "$TALOSCONFIG" > ~/.talos/config
          chmod 600 ~/.talos/config

      - name: Add kubeconfig
        env:
          KUBECONFIG_DATA: ${{ secrets.KUBECONFIG }}
        run: |
          mkdir -p ~/.kube
          echo "$KUBECONFIG_DATA" > ~/.kube/config
          chmod 600 ~/.kube/config

      - name: Parse control planes from nodes.tfvars
        id: control-planes
        run: |
          # Extract control plane names using awk and join with comma
          CP_NAMES=$(awk '/control_planes = {/,/^}/ {if ($1 ~ /name/) print $3}' tofu/nodes.tfvars | tr -d '",' | paste -sd,)
          echo "control_planes=$CP_NAMES" >> $GITHUB_OUTPUT

      - name: Get control plane IPs
        id: control-plane-ips
        run: |
          for cp in $(echo ${{ steps.control-planes.outputs.control_planes }} | tr ',' ' '); do
            echo "Getting IP for control plane $cp..."
            IP=$(tailscale ip -4 $cp)
            if [ -z "$IP" ]; then
              echo "::error::Could not get IP for control plane $cp"
              exit 1
            fi
            echo "Found IP $IP for control plane $cp"
            echo "cp_ip_${cp}=$IP" >> $GITHUB_OUTPUT
          done

      - name: Parse worker nodes from nodes.tfvars
        id: worker-nodes
        run: |
          # Extract worker node names using awk and join with comma
          WORKER_NODES=$(awk '/workers = {/,/^}/ {if ($1 ~ /name/) print $3}' tofu/nodes.tfvars | tr -d '",' | paste -sd,)
          echo "worker_nodes=$WORKER_NODES" >> $GITHUB_OUTPUT

      - name: Get worker node IPs
        id: worker-node-ips
        run: |
          for worker in $(echo ${{ steps.worker-nodes.outputs.worker_nodes }} | tr ',' ' '); do
            echo "Getting IP for worker $worker..."
            IP=$(tailscale ip -4 $worker)
            if [ -z "$IP" ]; then
                echo "::error::Could not get IP for worker $worker"
                exit 1
            fi
            echo "Found IP $IP for worker $worker"
            echo "worker_ip_${worker}=$IP" >> $GITHUB_OUTPUT
          done

      - name: Get current Kubernetes version
        id: current-k8s-version
        run: |
          sleep 10
          MAX_ATTEMPTS=3
          ATTEMPT=1
          while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
            echo "Attempt $ATTEMPT of $MAX_ATTEMPTS to get Kubernetes version..."
            K8S_VERSION=$(kubectl version | grep 'Server' | awk '{printf $3}' | sed 's/v//')
            
            if [ -n "$K8S_VERSION" ]; then
              echo "Successfully got Kubernetes version"
              echo "current_k8s_version=$K8S_VERSION" >> $GITHUB_OUTPUT
              break
            fi

            if [ $ATTEMPT -eq $MAX_ATTEMPTS ]; then
              echo "::error::No Kubernetes version found after $MAX_ATTEMPTS attempts"
              exit 1
            fi

            echo "No version found, retrying in 30 seconds..."
            sleep 30
            ATTEMPT=$((ATTEMPT + 1))
          done

      - name: Get target Kubernetes version from vars.yaml
        id: target-k8s-version
        run: |
          K8S_VERSION=$(grep kubernetesVersion vars.yaml | cut -d' ' -f2)
          echo "target_k8s_version=$K8S_VERSION" >> $GITHUB_OUTPUT

      - name: Upgrade Kubernetes on control planes if version changed
        if: steps.current-k8s-version.outputs.current_k8s_version != steps.target-k8s-version.outputs.target_k8s_version
        run: |
          echo "Updating Kubernetes from ${{ steps.current-k8s-version.outputs.current_k8s_version }} to ${{ steps.target-k8s-version.outputs.target_k8s_version }} on control planes"
          
          # Collect control plane IPs
          CP_IPS=""
          for cp in $(echo ${{ steps.control-planes.outputs.control_planes }} | tr ',' ' '); do
            IP=$(echo "${{ steps.control-plane-ips.outputs }}" | grep "cp_ip_${cp}=" | cut -d'=' -f2)
            if [ -n "$IP" ]; then
              CP_IPS="$CP_IPS $IP"
            fi
          done
          
          # Trim leading space
          CP_IPS=$(echo "$CP_IPS" | sed -e 's/^[[:space:]]*//')
          
          if [ -z "$CP_IPS" ]; then
            echo "::error::Could not get control plane IPs for Kubernetes upgrade"
            exit 1
          fi
          
          echo "Upgrading control planes with IPs: $CP_IPS"
          talosctl --nodes $CP_IPS upgrade-k8s --to ${{ steps.target-k8s-version.outputs.target_k8s_version }}

      - name: Wait for control plane upgrade to complete
        if: steps.current-k8s-version.outputs.current_k8s_version != steps.target-k8s-version.outputs.target_k8s_version
        run: |
          echo "Waiting for control plane Kubernetes upgrade to complete..."
          sleep 120

      - name: Verify control plane upgrade
        if: steps.current-k8s-version.outputs.current_k8s_version != steps.target-k8s-version.outputs.target_k8s_version
        run: |
          MAX_ATTEMPTS=5
          ATTEMPT=1
          while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
            echo "Attempt $ATTEMPT of $MAX_ATTEMPTS to verify control plane Kubernetes upgrade..."
            CURRENT_K8S_VERSION=$(kubectl version | grep 'Server' | awk '{printf $3}' | sed 's/v//')
            
            if [ "$CURRENT_K8S_VERSION" = "${{ steps.target-k8s-version.outputs.target_k8s_version }}" ]; then
              echo "Successfully verified control plane Kubernetes upgrade to ${{ steps.target-k8s-version.outputs.target_k8s_version }}"
              break
            fi
            
            if [ $ATTEMPT -eq $MAX_ATTEMPTS ]; then
              echo "::error::Control plane Kubernetes upgrade verification failed after $MAX_ATTEMPTS attempts"
              exit 1
            fi
            
            echo "Version mismatch, retrying in 60 seconds..."
            sleep 60
            ATTEMPT=$((ATTEMPT + 1))
          done

      - name: Upgrade Kubernetes on worker nodes if version changed
        if: steps.current-k8s-version.outputs.current_k8s_version != steps.target-k8s-version.outputs.target_k8s_version
        run: |
          echo "Updating Kubernetes from ${{ steps.current-k8s-version.outputs.current_k8s_version }} to ${{ steps.target-k8s-version.outputs.target_k8s_version }} on worker nodes"
          
          # Collect worker node IPs
          WORKER_IPS=""
          for worker in $(echo ${{ steps.worker-nodes.outputs.worker_nodes }} | tr ',' ' '); do
            IP=$(echo "${{ steps.worker-node-ips.outputs }}" | grep "worker_ip_${worker}=" | cut -d'=' -f2)
            if [ -n "$IP" ]; then
              WORKER_IPS="$WORKER_IPS $IP"
            fi
          done
          
          # Trim leading space
          WORKER_IPS=$(echo "$WORKER_IPS" | sed -e 's/^[[:space:]]*//')
          
          if [ -z "$WORKER_IPS" ]; then
            echo "::warning::No worker IPs found for Kubernetes upgrade"
          else
            echo "Upgrading worker nodes with IPs: $WORKER_IPS"
            talosctl --nodes $WORKER_IPS upgrade-k8s --to ${{ steps.target-k8s-version.outputs.target_k8s_version }}
          fi

      - name: Wait for worker upgrade to complete
        if: steps.current-k8s-version.outputs.current_k8s_version != steps.target-k8s-version.outputs.target_k8s_version
        run: |
          # Only wait if we have worker nodes
          if [ -n "$(echo ${{ steps.worker-nodes.outputs.worker_nodes }} | tr -d ',')" ]; then
            echo "Waiting for worker node Kubernetes upgrade to complete..."
            sleep 120
          fi

      - name: Verify final cluster status
        if: steps.current-k8s-version.outputs.current_k8s_version != steps.target-k8s-version.outputs.target_k8s_version
        run: |
          echo "Verifying final cluster status..."
          kubectl get nodes -o wide