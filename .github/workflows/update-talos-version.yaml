name: Update Talos Version

on:
  push:
    paths:
      - 'vars.yaml'
    branches:
      - main
  workflow_dispatch:

jobs:
  update-talos:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Install talosctl
        run: |
          curl -Lo /usr/local/bin/talosctl https://github.com/siderolabs/talos/releases/latest/download/talosctl-linux-amd64
          chmod +x /usr/local/bin/talosctl

      - name: Connect Tailscale
        uses: tailscale/github-action@v3
        with:
          oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
          oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}
          tags: tag:k8s-deploy
          hostname: kreat8s-talos-update
          use-cache: true
          args: '--ssh'

      - name: Add talosconfig
        env:
          TALOSCONFIG: ${{ secrets.TALOSCONFIG }}
        run: |
          mkdir -p ~/.talos
          echo "$TALOSCONFIG" > ~/.talos/config
          chmod 600 ~/.talos/config

      - name: Get current Talos version from nodes
        id: current-nodes-version
        run: |
          VERSIONS=$(talosctl version | sed '1,/Server/d' | grep "Tag:" | sort -t: -u -k1,1 | awk '{printf $2}')
          UNIQUE_VERSIONS=$(echo "$VERSIONS" | sort -u | wc -l)
          if [ "$UNIQUE_VERSIONS" -gt 1 ]; then
            echo "::error::Version mismatch between nodes, can't proceed safely"
            exit 1
          fi

          if [ -z "$VERSIONS" ]; then
            echo "::error::No Talos version found"
            sleep 10000 # ssh
            exit 1
          fi

          echo "current_nodes_version=$VERSIONS" >> $GITHUB_OUTPUT

      - name: Get target Talos version from vars.yaml
        id: target-version
        run: |
          TARGET_VERSION=$(grep talosVersion vars.yaml | cut -d' ' -f2)
          echo "target_version=$TARGET_VERSION" >> $GITHUB_OUTPUT

      - name: Update Talos version if changed
        if: steps.current-nodes-version.outputs.current_nodes_version != steps.target-version.outputs.target_version
        run: |
          echo "Updating Talos version from ${{ steps.current-nodes-version.outputs.current_nodes_version }} to ${{ steps.target-version.outputs.target_version }}"