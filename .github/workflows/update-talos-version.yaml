name: Update Talos Version

on:
  push:
    paths:
      - 'vars.yaml'
    branches:
      - main
  workflow_dispatch:

jobs:
  update-talos:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Install talosctl
        run: |
          curl -Lo /usr/local/bin/talosctl https://github.com/siderolabs/talos/releases/latest/download/talosctl-linux-amd64
          chmod +x /usr/local/bin/talosctl

      - name: Connect Tailscale
        uses: tailscale/github-action@v3
        with:
          oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
          oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}
          tags: tag:k8s-deploy
          hostname: kreat8s-talos-update
          use-cache: true

      - name: Add talosconfig
        env:
          TALOSCONFIG: ${{ secrets.TALOSCONFIG }}
        run: |
          mkdir -p ~/.talos
          echo "$TALOSCONFIG" > ~/.talos/config
          chmod 600 ~/.talos/config

      - name: Get current Talos version from nodes
        id: current-nodes-version
        run: |
          sleep 10
          VERSIONS=$(talosctl version | sed '1,/Server/d' | grep "Tag:" | sort -t: -u -k1,1 | awk '{printf $2}')
          UNIQUE_VERSIONS=$(echo "$VERSIONS" | sort -u | wc -l)
          if [ "$UNIQUE_VERSIONS" -gt 1 ]; then
            echo "::error::Version mismatch between nodes, can't proceed safely"
            exit 1
          fi

          if [ -z "$VERSIONS" ]; then
            echo "::error::No Talos version found"
            exit 1
          fi

          echo "current_nodes_version=$VERSIONS" >> $GITHUB_OUTPUT

      - name: Get target Talos version from vars.yaml
        id: target-version
        run: |
          TARGET_VERSION=$(grep talosVersion vars.yaml | cut -d' ' -f2)
          echo "target_version=$TARGET_VERSION" >> $GITHUB_OUTPUT

      - name: Get image ID from vars.yaml
        id: image-id
        run: |
          IMAGE_ID=$(grep imageId vars.yaml | cut -d' ' -f2)
          echo "image_id=$IMAGE_ID" >> $GITHUB_OUTPUT

      - name: Parse control planes from nodes.tfvars
        id: control-planes
        run: |
          # Extract control plane names using awk and join with comma
          CP_NAMES=$(awk '/control_planes = {/,/^}/ {if ($1 ~ /name/) print $3}' tofu/nodes.tfvars | tr -d '",' | paste -sd,)
          echo "control_planes=$CP_NAMES" >> $GITHUB_OUTPUT

      - name: Parse worker nodes from nodes.tfvars
        id: worker-nodes
        run: |
          # Extract worker node names using awk and join with comma
          WORKER_NODES=$(awk '/workers = {/,/^}/ {if ($1 ~ /name/) print $3}' tofu/nodes.tfvars | tr -d '",' | paste -sd,)
          echo "worker_nodes=$WORKER_NODES" >> $GITHUB_OUTPUT

      - name: Get control plane IPs
        id: control-plane-ips
        run: |
          for cp in $(echo ${{ steps.control-planes.outputs.control_planes }} | tr ',' ' '); do
            echo "Getting IP for control plane $cp..."
            IP=$(tailscale ip -4 $cp)
            if [ -z "$IP" ]; then
              echo "::error::Could not get IP for control plane $cp"
              exit 1
            fi
            echo "Found IP $IP for control plane $cp"
            echo "cp_ip_${cp}=$IP" >> $GITHUB_OUTPUT
          done

      - name: Get worker node IPs
        id: worker-node-ips
        run: |
          for worker in $(echo ${{ steps.worker-nodes.outputs.worker_nodes }} | tr ',' ' '); do
            echo "Getting IP for worker $worker..."
            IP=$(tailscale ip -4 $worker)
            if [ -z "$IP" ]; then
                echo "::error::Could not get IP for worker $worker"
                exit 1
            fi
            echo "Found IP $IP for worker $worker"
            echo "worker_ip_${worker}=$IP" >> $GITHUB_OUTPUT
          done

      - name: Update Talos version if changed (control planes)
        if: steps.current-nodes-version.outputs.current_nodes_version != steps.target-version.outputs.target_version
        run: |
          echo "Updating Talos version from ${{ steps.current-nodes-version.outputs.current_nodes_version }} to ${{ steps.target-version.outputs.target_version }} for control planes"
          for cp in $(echo ${{ steps.control-planes.outputs.control_planes }} | tr ',' ' '); do
            echo "Updating control plane: $cp"
            NODE_IP=$(echo "${{ steps.control-plane-ips.outputs }}" | grep "cp_ip_${cp}=" | cut -d'=' -f2)
            talosctl upgrade --image "factory.talos.dev/installer/${{ steps.image-id.outputs.image_id }}:${{ steps.target-version.outputs.target_version }}" --nodes "$NODE_IP"
            sleep 60

            UPGRADE_VERSION=$(talosctl version --nodes "$NODE_IP" | sed '1,/Server/d' | grep "Tag:" | sort -t: -u -k1,1 | awk '{printf $2}')
            if [ "$UPGRADE_VERSION" != "${{ steps.target-version.outputs.target_version }}" ]; then
              echo "::error::Upgrade failed for $cp"
              exit 1
            fi
          done

      - name: Wait for control planes to be ready
        if: steps.current-nodes-version.outputs.current_nodes_version != steps.target-version.outputs.target_version
        run: |
          echo "Waiting for control planes to be ready..."
          sleep 60  # Wait 1 minute for control planes to stabilize

      - name: Update Talos version if changed (worker nodes)
        if: steps.current-nodes-version.outputs.current_nodes_version != steps.target-version.outputs.target_version
        run: |
          echo "Updating Talos version from ${{ steps.current-nodes-version.outputs.current_nodes_version }} to ${{ steps.target-version.outputs.target_version }} for worker nodes"
          for worker in $(echo ${{ steps.worker-nodes.outputs.worker_nodes }} | tr ',' ' '); do
            echo "Updating worker node: $worker"
            NODE_IP=$(echo "${{ steps.worker-node-ips.outputs }}" | grep "worker_ip_${worker}=" | cut -d'=' -f2)
            talosctl upgrade --image "factory.talos.dev/installer/${{ steps.image-id.outputs.image_id }}:${{ steps.target-version.outputs.target_version }}" --nodes "$NODE_IP"
            sleep 60

            UPGRADE_VERSION=$(talosctl version --nodes "$NODE_IP" | sed '1,/Server/d' | grep "Tag:" | sort -t: -u -k1,1 | awk '{printf $2}')
            if [ "$UPGRADE_VERSION" != "${{ steps.target-version.outputs.target_version }}" ]; then
              echo "::error::Upgrade failed for $worker"
              exit 1
            fi
          done