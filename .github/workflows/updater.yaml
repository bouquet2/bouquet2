name: Update Talos and Kubernetes Version

permissions:
  contents: read
  id-token: write

on:
  push:
    paths:
      - 'vars.yaml'
    branches:
      - main
  workflow_dispatch:

jobs:
  setup:
    uses: ./.github/workflows/setup-environment.yaml
    secrets:
      TALOSCONFIG: ${{ secrets.TALOSCONFIG }}
      KUBECONFIG: ${{ secrets.KUBECONFIG }}
      TS_OAUTH_CLIENT_ID: ${{ secrets.TS_OAUTH_CLIENT_ID }}
      TS_OAUTH_SECRET: ${{ secrets.TS_OAUTH_SECRET }}

  update-talos:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Install talosctl
        run: |
          curl -Lo /usr/local/bin/talosctl https://github.com/siderolabs/talos/releases/latest/download/talosctl-linux-amd64
          chmod +x /usr/local/bin/talosctl

      - name: Connect Tailscale
        uses: tailscale/github-action@v3
        with:
          oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
          oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}
          tags: tag:k8s-deploy
          hostname: kreat8s-talos-update
          use-cache: true

      - name: Add talosconfig
        env:
          TALOSCONFIG: ${{ secrets.TALOSCONFIG }}
        run: |
          mkdir -p ~/.talos
          echo "$TALOSCONFIG" > ~/.talos/config
          chmod 600 ~/.talos/config

      - name: Get current Talos version from nodes
        id: current-nodes-version
        run: |
          MAX_ATTEMPTS=3
          ATTEMPT=1
          while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
            echo "Attempt $ATTEMPT of $MAX_ATTEMPTS to get Talos versions..."
            VERSIONS=$(talosctl version | sed '1,/Server/d' | grep "Tag:" | sort -t: -u -k1,1 | awk '{printf $2}')
            UNIQUE_VERSIONS=$(echo "$VERSIONS" | sort -u | wc -l)

            if [ "$UNIQUE_VERSIONS" -gt 1 ]; then
              echo "::error::Version mismatch between nodes, can't proceed safely"
              exit 1
            fi

            if [ -n "$VERSIONS" ]; then
              echo "Successfully got Talos versions"
              echo "current_nodes_version=$VERSIONS" >> $GITHUB_OUTPUT
              break
            fi

            if [ $ATTEMPT -eq $MAX_ATTEMPTS ]; then
              echo "::error::No Talos version found after $MAX_ATTEMPTS attempts"
              exit 1
            fi

            echo "No version found, retrying in 30 seconds..."
            sleep 30
            ATTEMPT=$((ATTEMPT + 1))
          done

      - name: Get target Talos version from vars.yaml
        id: target-version
        run: |
          TARGET_VERSION=$(grep talosVersion vars.yaml | cut -d' ' -f2)
          echo "target_version=$TARGET_VERSION" >> $GITHUB_OUTPUT

      - name: Get image ID from vars.yaml
        id: image-id
        run: |
          IMAGE_ID=$(grep imageId vars.yaml | cut -d' ' -f2)
          echo "image_id=$IMAGE_ID" >> $GITHUB_OUTPUT

      - name: Update Talos version if changed (control planes)
        if: steps.current-nodes-version.outputs.current_nodes_version != steps.target-version.outputs.target_version
        run: |
          echo "Updating Talos version from ${{ steps.current-nodes-version.outputs.current_nodes_version }} to ${{ steps.target-version.outputs.target_version }} for control planes"
          talosctl upgrade --image "factory.talos.dev/installer/${{ steps.image-id.outputs.image_id }}:${{ steps.target-version.outputs.target_version }}" --nodes "${{ needs.setup.outputs.cp_ips }}"
          sleep 60

          MAX_ATTEMPTS=3
          ATTEMPT=1
          while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
            echo "Attempt $ATTEMPT of $MAX_ATTEMPTS to verify upgrade for control planes..."
            UPGRADE_VERSION=$(talosctl version --nodes "${{ needs.setup.outputs.cp_ips }}" | sed '1,/Server/d' | grep "Tag:" | sort -t: -u -k1,1 | awk '{printf $2}')

            if [ "$UPGRADE_VERSION" = "${{ steps.target-version.outputs.target_version }}" ]; then
              echo "Successfully verified upgrade for control planes"
              break
            fi

            if [ $ATTEMPT -eq $MAX_ATTEMPTS ]; then
              echo "::error::Upgrade verification failed for control planes after $MAX_ATTEMPTS attempts"
              exit 1
            fi

            echo "Version mismatch, retrying in 30 seconds..."
            sleep 30
            ATTEMPT=$((ATTEMPT + 1))
          done

      - name: Wait for control planes to be ready
        if: steps.current-nodes-version.outputs.current_nodes_version != steps.target-version.outputs.target_version
        run: |
          echo "Waiting for control planes to be ready..."
          sleep 60  # Wait 1 minute for control planes to stabilize

      - name: Update Talos version if changed (worker nodes)
        if: steps.current-nodes-version.outputs.current_nodes_version != steps.target-version.outputs.target_version
        run: |
          if [ -n "${{ needs.setup.outputs.worker_ips }}" ]; then
            echo "Updating Talos version from ${{ steps.current-nodes-version.outputs.current_nodes_version }} to ${{ steps.target-version.outputs.target_version }} for worker nodes"
            talosctl upgrade --image "factory.talos.dev/installer/${{ steps.image-id.outputs.image_id }}:${{ steps.target-version.outputs.target_version }}" --nodes "${{ needs.setup.outputs.worker_ips }}"
            sleep 60

            MAX_ATTEMPTS=3
            ATTEMPT=1
            while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
              echo "Attempt $ATTEMPT of $MAX_ATTEMPTS to verify upgrade for worker nodes..."
              UPGRADE_VERSION=$(talosctl version --nodes "${{ needs.setup.outputs.worker_ips }}" | sed '1,/Server/d' | grep "Tag:" | sort -t: -u -k1,1 | awk '{printf $2}')

              if [ "$UPGRADE_VERSION" = "${{ steps.target-version.outputs.target_version }}" ]; then
                echo "Successfully verified upgrade for worker nodes"
                break
              fi

              if [ $ATTEMPT -eq $MAX_ATTEMPTS ]; then
                echo "::error::Upgrade verification failed for worker nodes after $MAX_ATTEMPTS attempts"
                exit 1
              fi

              echo "Version mismatch, retrying in 30 seconds..."
              sleep 30
              ATTEMPT=$((ATTEMPT + 1))
            done
          fi

  update-kubernetes:
    runs-on: ubuntu-latest
    needs: [setup, update-talos]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          chmod +x kubectl
          sudo mv kubectl /usr/local/bin/

      - name: Install talosctl
        run: |
          curl -Lo /usr/local/bin/talosctl https://github.com/siderolabs/talos/releases/latest/download/talosctl-linux-amd64
          chmod +x /usr/local/bin/talosctl

      - name: Connect Tailscale
        uses: tailscale/github-action@v3
        with:
          oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
          oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}
          tags: tag:k8s-deploy
          hostname: kreat8s-k8s-update
          use-cache: true

      - name: Add talosconfig
        env:
          TALOSCONFIG: ${{ secrets.TALOSCONFIG }}
        run: |
          mkdir -p ~/.talos
          echo "$TALOSCONFIG" > ~/.talos/config
          chmod 600 ~/.talos/config

      - name: Add kubeconfig
        env:
          KUBECONFIG_DATA: ${{ secrets.KUBECONFIG }}
        run: |
          mkdir -p ~/.kube
          echo "$KUBECONFIG_DATA" > ~/.kube/config
          chmod 600 ~/.kube/config

      - name: Get current Kubernetes version
        id: current-k8s-version
        run: |
          MAX_ATTEMPTS=3
          ATTEMPT=1
          while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
            echo "Attempt $ATTEMPT of $MAX_ATTEMPTS to get Kubernetes version..."
            K8S_VERSION=$(kubectl version | grep 'Server' | awk '{printf $3}' | sed 's/v//')

            if [ -n "$K8S_VERSION" ]; then
              echo "Successfully got Kubernetes version"
              echo "current_k8s_version=$K8S_VERSION" >> $GITHUB_OUTPUT
              break
            fi

            if [ $ATTEMPT -eq $MAX_ATTEMPTS ]; then
              echo "::error::No Kubernetes version found after $MAX_ATTEMPTS attempts"
              exit 1
            fi

            echo "No version found, retrying in 30 seconds..."
            sleep 30
            ATTEMPT=$((ATTEMPT + 1))
          done

      - name: Get target Kubernetes version from vars.yaml
        id: target-k8s-version
        run: |
          K8S_VERSION=$(grep k8sVersion vars.yaml | cut -d' ' -f2)
          # Remove 'v' prefix if present
          K8S_VERSION=$(echo "$K8S_VERSION" | sed 's/^v//')
          echo "target_k8s_version=$K8S_VERSION" >> $GITHUB_OUTPUT

      - name: Upgrade Kubernetes on control planes if version changed
        if: steps.current-k8s-version.outputs.current_k8s_version != steps.target-k8s-version.outputs.target_k8s_version
        run: |
          echo "Updating Kubernetes from ${{ steps.current-k8s-version.outputs.current_k8s_version }} to ${{ steps.target-k8s-version.outputs.target_k8s_version }} on control planes"
          talosctl --nodes "${{ needs.setup.outputs.cp_ips }}" upgrade-k8s --to "${{ steps.target-k8s-version.outputs.target_k8s_version }}" > /dev/null

      - name: Wait for control plane upgrade to complete
        if: steps.current-k8s-version.outputs.current_k8s_version != steps.target-k8s-version.outputs.target_k8s_version
        run: |
          echo "Waiting for control plane Kubernetes upgrade to complete..."
          sleep 120

      - name: Verify control plane upgrade
        if: steps.current-k8s-version.outputs.current_k8s_version != steps.target-k8s-version.outputs.target_k8s_version
        run: |
          MAX_ATTEMPTS=5
          ATTEMPT=1
          while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
            echo "Attempt $ATTEMPT of $MAX_ATTEMPTS to verify control plane Kubernetes upgrade..."
            CURRENT_K8S_VERSION=$(kubectl version | grep 'Server' | awk '{printf $3}' | sed 's/v//')

            if [ "$CURRENT_K8S_VERSION" = "${{ steps.target-k8s-version.outputs.target_k8s_version }}" ]; then
              echo "Successfully verified control plane Kubernetes upgrade to ${{ steps.target-k8s-version.outputs.target_k8s_version }}"
              break
            fi

            if [ $ATTEMPT -eq $MAX_ATTEMPTS ]; then
              echo "::error::Control plane Kubernetes upgrade verification failed after $MAX_ATTEMPTS attempts"
              exit 1
            fi

            echo "Version mismatch, retrying in 60 seconds..."
            sleep 60
            ATTEMPT=$((ATTEMPT + 1))
          done

      - name: Remove job batch cilium-install as it is immutable
        run: |
          kubectl delete job -n kube-system cilium-install

      - name: Upgrade Kubernetes on worker nodes if version changed
        if: steps.current-k8s-version.outputs.current_k8s_version != steps.target-k8s-version.outputs.target_k8s_version
        run: |
          if [ -n "${{ needs.setup.outputs.worker_ips }}" ]; then
            echo "Updating Kubernetes from ${{ steps.current-k8s-version.outputs.current_k8s_version }} to ${{ steps.target-k8s-version.outputs.target_k8s_version }} on worker nodes"
            talosctl --nodes "${{ needs.setup.outputs.worker_ips }}" upgrade-k8s --to "${{ steps.target-k8s-version.outputs.target_k8s_version }}" > /dev/null
          fi

      - name: Wait for worker upgrade to complete
        if: steps.current-k8s-version.outputs.current_k8s_version != steps.target-k8s-version.outputs.target_k8s_version
        run: |
          # Only wait if we have worker nodes
          if [ -n "${{ needs.setup.outputs.worker_ips }}" ]; then
            echo "Waiting for worker node Kubernetes upgrade to complete..."
            sleep 120
          fi

      - name: Verify final cluster status
        if: steps.current-k8s-version.outputs.current_k8s_version != steps.target-k8s-version.outputs.target_k8s_version
        run: |-
          echo "Verifying final cluster status..."
          kubectl get nodes -o wide
